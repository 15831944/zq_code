#include "a.h"

//生成可执行文件的过程中，第一步是预编译，预编译过程要到当前
//操作系统的目录中去查找被include的头文件，这个是一个树形目录
//结构的遍历过程，如果一个工程中用到的头文件非常多，那么这个
//过程将有较大的效率消耗。因为头文件中主要用到的就是声明的相
//关信息，所以如果我们提前把所有本工程用到的头文件中的信息都
//放到一个文件中（假设叫pch文件），那么每次预编译的时候我们就
//不去操作系统的目录中查找头文件，而直接去那个pch文件中查找相
//关信息即可，这就避免了树形遍历的过程，可以大大地提高我们的
//工程编译的速度

//Windows编程中使用预编译头文件解决上面的问题
//1）用一个头文件（假设为a.h）包含我们的工程中需要
//   的其它头文件（这些头文件一般不怎么修改）
//2）用一个源文件（假设为a.cpp）包含a.h，然后设置
//   该源文件为创建预编译头，在a.cpp的[属性][C\C++]
//   [预编译头]中设置，此时这个a.cpp在被编译的时候
//   就能生成一个后缀名为pch的文件，这个文件中包含
//   了a.h中包含的那些头文件中的所有声明信息，这个
//   pch文件就是预编译头文件
//3）其它cpp中如果要用到a.h中包含的头文件，那么其它
//   cpp只需要包含a.h并在[属性][C\C++][预编译头]中
//   设置使用预编译头文件即可，那么其后这些cpp中在
//   编译的时候就不会去进行目录树的搜索了，只去a.pch
//   中查找声明信息，可以加快速度

void main()
{

	system("pause");
}