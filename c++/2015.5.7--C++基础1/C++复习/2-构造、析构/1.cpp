#include <iostream>

class A
{
public:

	//构造
	//名字必须和类名相同
	//没有返回值类型
	//可以重载
	//类对象分配了内存之后自动被执行
	//如果不写任何一个构造，则编译器会自动为我们的类中添加一个公有的、无参的、什么都不做的构造函数
	A(){std::cout<<"无参构造"<<std::endl;}
	A(int a){std::cout<<"带参构造1"<<std::endl;}
	A(int a, int b){std::cout<<"带参构造2"<<std::endl;}

	//析构
	//名字必须和类名相同，前面加上~
	//没有返回值类型
	//不能重载
	//类对象要被释放内存之前自动被执行
	//如果不写析构，则编译器会自动为我们的类中添加一个公有的、什么都不做的析构函数
	~A(){std::cout<<"析构"<<std::endl;}
};

//A a2; //静态中分配

void main()
{
	//A a1; //栈中分配

	//C语言中的堆内存分配、释放和C++中的堆内存分配、释放的区别

	//C语言中
	//malloc函数
	//1）分配指定大小的内存
	A* p1 = (A*)malloc(sizeof(A)); //在堆中创建1个类对象
	A* p2 = (A*)malloc(sizeof(A) * 5); //在堆中创建1个类对象数组
	//free函数
	//1）释放内存
	free(p2);
	free(p1);

	//C++中
	//new关键字
	//1）分配指定大小的内存（编译器会根据对象类型帮我们算出来）
	//2）在分配的内存上面执行构造
	A* q1 = new A;
	//new []关键字
	//1）分配指定数组大小的内存（编译器会根据对象类型帮我们算出来）
	//2）在分配的内存上面依次为每一个类对象执行构造
	A* q2 = new A[5];
	//delete关键字
	//1）在指定类对象上面执行析构函数
	//2）释放指定类对象占据的堆内存
	delete q1;
	//delete []关键字
	//1）在指定类对象数组上面依次执行每个类对象的析构函数
	//2）释放指定类对象数组占据的堆内存
	delete [] q2;
	
	system("pause");
}