#include <iostream>

//运算符
//01)赋值运算符 = 将=右边的表达式的结果赋值给左边的变量
//赋值运算表达式的结果就是=左边的变量
//02)算术运算符：+，-，* ，/，% ，负号
//    (01)整数除法舍去小数不封，浮点数除法保留小数部分
//    (02)0不能做除数
//    (03)0不能做模数
//    (04)浮点数因为没有余数的概念，所有浮点数不能取模
//03)取字节运算符：
//sizeof:可以计算任何类型所占据的字节数
//sizeof:可以计算表达式的结果所占据的字节数
//04)自增自减运算符：++ --
//   01)自增自减1
//   02)++或者--在变量前面的时候，先自增或自减1，之后再参与运算
//   03)++或者--在变量后面的时候，先参与运算，在自增或自减1
//05)逻辑运算符： &&(逻辑与)，||(逻辑或)，!(逻辑非)
//06)关系运算符：== , != ,>, >= ,<,<=
//07)条件运算符：A?B:C;
//08)位运算符: &(位与)，|(位或)，^(位异或)，~(位取反)，<<(位左移)，>>(位右移)
//09)自赋值运算符：+=，-=，*=,/=,%= ,&=,|=,^=,<<=,>>=
void main()
{
	int a = 6/2;
	std::cout<<a<<std::endl;

	double b = 6.3/2.5;
	std::cout<<b<<std::endl;

	a = 6 % 2;

	std::cout<<a<<std::endl;


	std::cout<<sizeof(a+5)<<std::endl;

	a = 5;
	int c = 6;
	a = ++c;//a 7 c 7
	a = c++;//a 7 c 8
	a = c--;//a 8 c 7
	a = --c;//a 6 c 6

	//A && B :当A和B都为真的时候 A&&B为真。否则为假
	a && c;//真
	0 && a;//假
	//A||B:当A和B都为假时，A||B为假，其他为真
	a || 0;//真
	//!A:当A为真时，!A为假，当A为假时，!A为真
	!a;//假
	a = !a;
	a && c;//假
	a || !c;//假

	//A==B：当A和B的值相等时，A==B 为真
	a == c;//假 a(0),c(6)
	//A!=B:当A和B的值不相等时，A!=B为真
	a != c;//真

	//A?B:C 当A为真时执行B，当A为假时，执行C
	a ? std::cout<<"1"<<std::endl:std::cout<<"2"<<std::endl;

	//&：位与 同为1则为1，其他为0
	//00000011 11000010 01000101 10100010
	//11001010 11100010 10101111 11110000
	//00000010 11000010 00000101 10100000
	//按位与常常用来将变量中的某些为设置为0
	
	//00000000 01101110 10101110 00110010
	//00000000 01100000 10100000 00000010
	//00 60 A0 02
	//& 0x60a002
	//11111111 11110001 11110001 11001111
	//ff f1 f1 cf
	//& 0xfff1f1cf
	//00000000 01100000 10100000 00000010
	
	//|位或：同为0则为0，其他为1
	//00000011 11000010 01000101 10100010
	//11001010 11100010 10101111 11110000
	//11001011 11100010 11101111 11110010
	//用来将变量中某些为设置为1

	//00000000 01101110 10101110 00110010
	//11110000 11111110 10101110 11110011
	//f0 fe ae f3
	//|0xf0feaef3
	//11110000 11111110 10101110 11110011

	//^位异或：相同为0，不同为1
	//00000011 11000010 01000101 10100010
	//11001010 11100010 10101111 11110000
	//11001001 00100000 11101010 01010010
	//11001010 11100010 10101111 11110000
	//00000011 11000010 01000101 10100010
	//A^B^B;A连续异或B两次将得到它本身
	
	//~位取反 0变1,1变0
	//00000011 11000010 01000101 10100010
	//11111100 00111101 10111010 01011101
	
	//<<位左移：先向左移动指定位，然后在后面空出的位置补0
	//00000011 11000010 01000101 10100010 <<3
	//00011110 00010010 00101101 00010000
	//左移n位相当于乘以2的n次方
	int c;
	c = 3<<2;//c = 3 * 4;
	c = c << 3;//c = 12 * 8;
	//>>位右移：先向右移动指定位，前面空出的位置补符号位
	//0为正，1为负
	//-12345 >> 4
	//00000000 00000000 00110000 00111001
	//11111111 11111111 11001111 11000111 
	//11111111 11111111 11111100 11111100
	//右移n位相当于除以2的n次方
	
	c = 16;
	c = c >> 2;//c = c/4;4


	c += 2;//c = c + 2;
	c -= 2;//c = c - 2;
	c *= 2;//c = c * 2;
	c /= 2;//c = c / 2;
	c %= 2;//c = c % 2;
	c &= 2;//c = c & 2;
	c |= 2;//c = c | 2;
	c ^= 2;//c = c ^ 2;
	c <<= 2;//c = c << 2;
	c >>= 2;//c = c >> 2;
	c++;//c = c + 1;c += 1;
	system("pause");
}