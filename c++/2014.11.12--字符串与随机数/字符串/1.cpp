#include<iostream>

//字符串的写法
//字符串的长度
//字符串在内存中的存储形式
//字符串的结束标志
//字符串在内存中所占的字节数

void main()
{
	//用""括起来的一段文字就是字符串字面常量
	"123abc";

	//字符串的长度:就是存储该字符串的所有的编码
	//所需要的字节数
	//"123abc"长度为6
	//"123 abc"长度7
	//"123abc你好"长度10
	//编译器一旦在代码文本中发现了字符串字面
	//常量，就会在常量内存区中开辟(字符串长度 + 1)
	//个字节的连续的内存块,比如说上面的"123abc"
	//就会导致在常量内存区中开辟了7个字节的连续
	//内存块，在将字符串中的每个文字对应的编码
	//依次放到刚刚开辟的内存单元中，多出的一个
	//字节会被填入一个0(不是'0')作为这个字符串的
	//结束标志，而"123abc"作为表达式而言就是刚才
	//开辟的内存的首地址
	//0xaabbcce0   ->31 <- "123abc"
	//0xaabbcce1   ->32
	//0xaabbcce2   ->33
	//0xaabbcce3   ->61
	//0xaabbcce4   ->62
	//0xaabbcce5   ->63
	//0xaabbcce6   ->00
	//"1230"//开辟了5个字节的内存空间
	//在C 和C++中总是用0作为字符串的结束标志(结束符)
	//所有的和字符串相关的操作，函数都是默认这种情况
	std::cout<<"123abc\n";
	//std::cout<<字符串字面常量;
	//从该地址开始一直打印内存中整数对应的文字，直到出现结束符0
	char s1[6] = {'1','2','3','a','b','c'};
	char s2[7] = {'1','2','3','a','b','c','0'};
	//std::cout<<(int)'0';
	char s3[7] = {'1','2','3','a','b','c',0};
	//s3和"123abc"的内存中的情况是完全相同
	
	//sizeof(类型)：获取数据类型所占的字节数
	//sizeof(表达式):获取表达式的结果所属的数据类型所占的字节数
	//sizeof(数组名):数组总共所占的字节数
	//sizeof(字符串字面常量)：存储该字符串字面常量的内存区所占的字节数(含结束符)
	std::cout<<sizeof("123abc")<<std::endl;

	std::cout<<sizeof("123 abc")<<std::endl;

	system("pause");
}