#include<iostream>

//*
//乘法运算符:A * B
//解引用运算符(取变量)
//*A : A必须是一个地址
//则*A是A地址上的那个变量
//这个变量必须是和A地址的数据类型是一致


//&
//逻辑与 && :A&&B
//位与： A&B
//取地址运算符
//&A: A必须是一个变量
//则&A是A的地址，这个地址的类型和A变量的类型是一致的

void main()
{
	//地址与[](下标运算符)
	//假设有x类型的地址p,则p[n]表示
	//从p开始算的第n个x类型变量([]中的下标从0开始算)

	std::cout<<"123abc"[4]<<std::endl;
	
	short a[5] = {1,2,3,4,5};

	a[3] = 5;//1 2 3 5 5

	//地址与*(解引用运算符)
	//假设有X类型的地址p，则*p表示p地址上的那个X类型的变量
	
	*a = a[1] + a[2];//5 2 3 5 5 
	
	*(&a[2]) = 11;//5 2 11 5  5

	std::cout<<*"xyz"<<std::endl;
	
	std::cout<<*(&("xyz"[1]))<<std::endl;

	//地址与整数的加法(减法)
	//假设有X类型的地址p,则p + n(整数)的结果也是一个
	//X类型的地址，相当于p偏移sizeof(X类型) * n个字节
	
	(a + 2)[-1] = 14;//5  14 11 5 5

	*(a + 3) = 15;//5  14 11 15 5

	//地址可取，但该地址的数据不知道
	///(a + (a[3] - *(&a[2] + 2)))[-1] = 16;
	///std::cout<<(a + (a[3] - *(&a[2] + 2)))<<std::endl;
	
	std::cout<<"abcdef" + 3<<std::endl;
	std::cout<<&(("abcdef" + 3)[-2])<<std::endl;

	//地址与地址的减法
	//两个地址要能够相减，这两个地址的类型必须一致
	//假设有X类型的地址p1,p2，则p1-p2的结果是一个整数
	//其大小为(p1的字节编号-p2的字节编号)/sizeof(X)
	
	std::cout<<&a[4] - &a[1]<<std::endl;
	std::cout<<&a[4] - a<<std::endl;
	system("pause");
}