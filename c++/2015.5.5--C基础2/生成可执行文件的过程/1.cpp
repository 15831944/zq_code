//#include "b.h"
//#include "a.h"

//#include "a.h"
//#include "b.h"

//头文件本身并不进行编译，只会被替换到源文件中，编译
//的单元是源文件，所以头文件应该是放入源文件的上下文
//中看待，凡是写在头文件中东西，往往意味着这些内容是
//使用这个模块（一对h和cpp）的用户应该知道的

//一般来说，头文件中写如下的东西
//暴露给模块使用者的函数的声明
//暴露给模块使用者的全局变量的声明（危险！）
//暴露给模块使用者的宏
//暴露给模块使用者的复合数据类型定义

//wzq.h
//#define _QP_W 19
//#define _QP_H 19
//
//wzq.cpp
//char qp[_QP_W * _QP_H];

//VS是集成开发环境IDE，它是把文字编辑器、编译器、链接器
//、调试器整合在一起的一个工具，方便程序开发人员使用

//生成可执行文件
//1）预编译（cl.exe编译器，处理h和cpp得到cpp），主要是宏起作用
//处理当前工程中的所有宏命令，所有的#define的宏将被替换，所有
//的条件编译将被替换，所有的#include命令将被头文件内的内容替换
//本步骤执行完毕之后，工程中就不存在头文件了，只有源文件

//2）编译（cl.exe编译器，处理cpp得到obj），主要是声明起作用
//编译单元是源文件，每个源文件都是单独编译和其它源文件没有任何
//关系，编译过程中，在访问一个标识符之前必须有这个标识符的定义
//或声明，在同一个源文件中，一个标识符的定义只能出现一次，当本
//步骤执行完毕之后，就得到了从源文件编译而来的目标文件obj，注意
//obj文件中存放了各种标识符的定义，以及函数中的访问信息

//3）链接（link.exe链接器，处理obj、lib得到exe），主要是定义起作用
//把所有工程中的obj和工程中要链接的lib一起，生成可执行文件exe，这个
//阶段中，会根据工程中函数的访问信息去obj或lib中查找相应标识符的定义
//，找不到就报错，全部都能够找到就可以生成可执行文件，注意这个过程中
//同一个标识符的定义在整个工程中只能出现一次

#include <iostream>
#include "2.h"
void main()
{
	f();
	x = ABC * 2;
	std::cout<<x<<std::endl;
	system("pause");

	//Debug版本中，每定义一个变量，系统会分配sizeof(变量)+8字节
	//的存储空间来存储这个变量，比如short x = 0;
	//CC CC CC CC 00 00 CC CC CC CC，CC在运行完毕的时候是作为一个
	//内存越界标志而存在的，系统会检查变量前后的各自的4字节是否被
	//修改，一旦不是CC CC CC CC系统就认为是内存越界
}