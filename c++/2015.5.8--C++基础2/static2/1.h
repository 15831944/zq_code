#ifndef _1_H_
#define _1_H_

extern int a1;
void b1();

extern int a2;
void b2();

void f();

//只要是包含了1.h的cpp文件中，都会出现一个属于本文件内部的int d，比如
//对abc.cpp中的d进行访问是不会影响1.cpp中的d
static int d;

class A
{
public:
	int a1; //非静态成员变量

	//用法3：修饰类中成员变量
	//1）被修饰的成员变量被放在静态内存区
	//2）本质上就是一个全局变量，只不过它是属于某个类的
	//3）它必须在cpp中被显式定义出来
	//4）它可以直接用类名::引出来进行访问
	static int a2; //静态成员变量

	void f1()
	{
		a1 = 1;
		a2 = 2;
	}

	//用法4：修饰类中成员函数
	//1）被修饰的类中成员函数的本质上就是一个全局函数，被成为类中静态成员函数
	//2）类中静态成员函数只能访问类的静态成员（变量、函数）
	//3）它没有隐藏的形式参数this，非静态成员函数都有this
	static void f2()
	{
		//a1 = 1; //a1是非静态成员变量，不能访问
		a2 = 2; //a2是静态成员变量，可以访问

		//this->a1; //因为没有this，所以编译器不可能处理成左侧的情况
		//a2; //a2是静态成员变量（全局变量），无需this来引出
	}

	void f3()
	{
		a1 = 1;
		a2 = 2;
		f1();
		f2();
	}

	static void f4()
	{
		//a1 = 1;
		a2 = 2;
		//f1();
		f2();
	}
};

#endif