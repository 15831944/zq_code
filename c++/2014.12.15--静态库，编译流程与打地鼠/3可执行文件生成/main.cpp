#include <iostream>
#include "Test.h"

#define ADD(x,y) ((x) + (y))

void main()
{
	a = ADD(a,4);
	std::cout<<a<<std::endl;
	f();
	system("pause");
}
//从一个工程生成可执行文件的过程
//01）预编译阶段(宏命令起作用)
//	a)本阶段中每个cpp都是独立处理的相互没有影响
//	b)工程中的所有cpp中的宏命令起作用，比如#define,
//     #include的文本替换，经过本阶段处理后，工程中
//	   就只有cpp文件
//02)编译阶段(声明起作用)
//	a)本阶段中每个cpp都是独立处理的相互没有影响
//	b)工程中的所有的cpp都会被编译器(cl.exe)
//    处理编译为obj文件(目标文件),obj文件中就说各个
//    全局变量，函数的定义以及函数中的访问信息
//  c)本阶段编译中，在访问一个标识符之前，必须有这个
//    标识符的声明(定义也可以)，同一个标识符的定义在整个
//    cpp文件中只能有一次
//03)链接阶段(定义起作用)
//  a)本阶段每个obj，lib的处理是有相互联系的
//  b)lib文件(静态库文件)中包含的内容与obj文件是
//   差不多的，也是各个全局变量，函数的定义以及函数中的
//   访问信息,C和C++的运行时库是特殊的lib文件，C和C++工程
//   会自动链接
//  c)所有的obj文件以及可能用到的lib文件共同被链接器(link.exe)
//   处理，生成最后的可执行文件
//  d)本阶段链接中，如果发现在一个函数中有访问某个标识符
//   则就会到工程中的所有obj文件以及可能用到的lib文件中去
//   查找那个标识符的定义，找不到就链接报错，同一个标识符
//   在整个工程的所有的obj,lib里面只能有一次，如果出现重复
//   定义就链接报错
