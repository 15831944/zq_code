一.有名管道（FIFO：全程First Input First Output，先出先入队列）
1.有名管道可以让无关联的进程之间交换数据
2.一个shell命令可以建立有名管道
例如：  mkfifo fifol
--创建了一个有名管道fifol
	cat < fifol
--通过cat命令从fifol中读取数据
	ls > fifol
--将ls命令输出的结果写入fifol中

二.创建和删除fifo
--创建
int mkfifo(const char* pathname,mode_t mode)
成功返回0，否则返回-1，并设置变量errno

删除
int unlink(const char* pathname)
成功返回0，否则返回-1，并设置变量errno

三.读写fifo
int open(const char* pathname,int flags)
int close(int fd)
1.和打开一个普通文件操作是一样的
2.fifo的两端使用前都必须打开
3.open中如果参数flag为0_RDONLY将会阻塞open调用，一直到另个进程为写入数据打开fifo为止，相同的，O_WRONLY也会导致阻塞一直到为读出数据打开fifo为止
例子如下：
-----------读fifo---------
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/wait.h>

int main(int arg, char* args[])
{
	int len = 0;
	char buf[100];
	memset(buf, 0, sizeof(buf));
	//以只读方式打开fifo1
	int fd = open("fifo1", O_RDONLY);
	//循环从fifo中读数据，直到fifo被关闭
	while ((len = read(fd, buf, sizeof(buf))) > 0)
	{
		printf("%s\n", buf);
	}
	close(fd);
	return 0;
}

------------写fifo----------
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/wait.h>

int main(int arg, char* args[])
{
	int len = 0;
	char buf[100];
	memset(buf, 0, sizeof(buf));
	//以只读方式打开fifo1
	int fd = open("fifo1", O_WRONLY);
	//循环从fifo中读数据，直到fifo被关闭
	while (1)
	{
		scanf("%s", buf);
		if (buf[0] == '0')
			break;
		write(fd, buf, sizeof(buf));
	}
	close(fd);
	return 0;
}
